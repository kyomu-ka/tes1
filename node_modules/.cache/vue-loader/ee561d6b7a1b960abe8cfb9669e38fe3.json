{"remainingRequest":"C:\\Users\\jodaiich\\vue-liff-bot\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\jodaiich\\vue-liff-bot\\src\\components\\InputForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\jodaiich\\vue-liff-bot\\src\\components\\InputForm.vue","mtime":1559640926722},{"path":"C:\\Users\\jodaiich\\vue-liff-bot\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558574652645},{"path":"C:\\Users\\jodaiich\\vue-liff-bot\\node_modules\\babel-loader\\lib\\index.js","mtime":1558574634315},{"path":"C:\\Users\\jodaiich\\vue-liff-bot\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1558574652645},{"path":"C:\\Users\\jodaiich\\vue-liff-bot\\node_modules\\vue-loader\\lib\\index.js","mtime":1558574653831}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nexport default {\n  name: 'InputForm',\n  props: {\n    ttl: String\n  },\n  data() {\n    return {\n      data: {\n        name: '',\n        reason: '',\n        reason_other: '',\n        schedule: '',\n        time1: '',\n        time2: '',\n        message: '',\n      },\n      // 遅刻理由の中身\n      reasons: ['電車遅延', '体調不良', '忘れ物', 'その他'],\n      // 種別の中身\n      types: ['遅刻します', '全休をいただきます', '午前休をいただきます', '午後休をいただきます'],\n      // メッセージのテンプレート\n      text1: 'おはようございます。',\n      text2: 'よろしくお願いします。'\n    };\n  },\n  methods: {\n    // 時間のオプションを配列で生成\n    createTimes: function(init, to) {\n      const times = [];\n      for (let index = init; index < to; index++) {\n        times.push(`${index * 5}分`);\n      }\n      return times;\n    },\n    // inputに変更があった場合にメッセージの作成\n    createMessage: function() {\n      let text, text_reson, text_schedule\n\n      // その他の場合は、reason_otherのデータを使用\n      if (this.data.reason == \"その他\") {\n        text_reson = this.data.reason_other\n      } else {\n        text_reson = this.data.reason\n      }\n\n      // 遅刻の場合は時間に入力した時間を使用して生成\n      if (this.data.schedule == \"遅刻します\") {\n        text_schedule = `${this.data.time1}～${this.data.time2}ほど${this.data.schedule}`\n      } else {\n        text_schedule = this.data.schedule\n      }\n\n      // メッセージを生成\n      text = `${this.text1}${this.data.name}です。${text_reson}のため${text_schedule}。${this.text2}`;\n\n      // データに渡す\n      this.data.message = text;\n    },\n  }\n};\n",{"version":3,"sources":["InputForm.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"InputForm.vue","sourceRoot":"src/components","sourcesContent":["<template>\r\n  <div class=\"container\">\r\n    <!-- 親のpropsを受け取る -->\r\n    <h1 class=\"text-center pb-2\">{{ttl}}</h1>\r\n    <!-- submitイベントを無効に -->\r\n    <form @submit.prevent=\"\">\r\n      <div class=\"form-group\">\r\n        <label for=\"name\">名前</label>\r\n        <input type=\"text\" class=\"form-control\" id=\"name\" v-model=\"data.name\" @change=\"createMessage()\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"reason\">遅刻理由</label>\r\n        <select class=\"form-control\" v-model=\"data.reason\" id=\"reason\" @change=\"createMessage()\">\r\n            <option v-for=\"(reason, index) in reasons\" :key=\"index\">{{reason}}</option>\r\n          </select>\r\n      </div>\r\n      <!-- 理由がその他の時のみ表示 -->\r\n      <div class=\"form-group\" v-show=\"data.reason=='その他'\">\r\n        <input type=\"text\" class=\"form-control\" id=\"reson_other\" @change=\"createMessage()\" placeholder=\"その他の場合は理由を書いてください。\" v-model=\"data.reason_other\">\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label>種別</label>\r\n        <div class=\"form-check\" v-for=\"(type, index) in types\" :key=\"index\">\r\n          <input class=\"form-check-input\" type=\"radio\" v-model=\"data.schedule\" :id=\"index\" :value=\"type\" :checked=\"((index!=0)? '': 'checked')\" @change=\"createMessage()\">\r\n          <label class=\"form-check-label\" :for=\"index\">{{type}}</label>\r\n        </div>\r\n      </div>\r\n      <!-- 種別が遅刻しますの時のみ表示 -->\r\n      <div class=\"form-group\" v-show=\"data.schedule == '遅刻します'\">\r\n        <label>遅刻時間</label>\r\n        <div class=\"form-row align-items-center\">\r\n          <div class=\"col-5 form-group\">\r\n            <select class=\"form-control\" v-model=\"data.time1\" @change=\"createMessage()\">\r\n              <!-- createTimes()の配列を設定 -->\r\n              <option v-for=\"(time, index) in createTimes(0,12)\" :key=\"index\">{{time}}</option>\r\n            </select>\r\n          </div>\r\n          <div class=\"col-2 text-center form-group\">\r\n            <span>～</span>\r\n          </div>\r\n          <div class=\"col-5 form-group\">\r\n            <!-- createTimes()の配列を設定 -->\r\n            <select class=\"form-control\" v-model=\"data.time2\" @change=\"createMessage()\">\r\n              <option v-for=\"(time, index) in createTimes(1,13)\" :key=\"index\">{{time}}</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div class=\"form-group\">\r\n        <label for=\"message\">メッセージ</label>\r\n        <!-- createMessageで生成されたデータを挿入 -->\r\n        <textarea class=\"form-control\" id=\"message\" rows=\"5\" v-model=\"data.message\"></textarea>\r\n      </div>\r\n      <div class=\"form-group pt-2\">\r\n        <button class=\"btn btn-primary btn-lg btn-block\" id=\"send\" type=\"submit\">送信</button>\r\n      </div>\r\n    </form>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    name: 'InputForm',\r\n    props: {\r\n      ttl: String\r\n    },\r\n    data() {\r\n      return {\r\n        data: {\r\n          name: '',\r\n          reason: '',\r\n          reason_other: '',\r\n          schedule: '',\r\n          time1: '',\r\n          time2: '',\r\n          message: '',\r\n        },\r\n        // 遅刻理由の中身\r\n        reasons: ['電車遅延', '体調不良', '忘れ物', 'その他'],\r\n        // 種別の中身\r\n        types: ['遅刻します', '全休をいただきます', '午前休をいただきます', '午後休をいただきます'],\r\n        // メッセージのテンプレート\r\n        text1: 'おはようございます。',\r\n        text2: 'よろしくお願いします。'\r\n      };\r\n    },\r\n    methods: {\r\n      // 時間のオプションを配列で生成\r\n      createTimes: function(init, to) {\r\n        const times = [];\r\n        for (let index = init; index < to; index++) {\r\n          times.push(`${index * 5}分`);\r\n        }\r\n        return times;\r\n      },\r\n      // inputに変更があった場合にメッセージの作成\r\n      createMessage: function() {\r\n        let text, text_reson, text_schedule\r\n\r\n        // その他の場合は、reason_otherのデータを使用\r\n        if (this.data.reason == \"その他\") {\r\n          text_reson = this.data.reason_other\r\n        } else {\r\n          text_reson = this.data.reason\r\n        }\r\n\r\n        // 遅刻の場合は時間に入力した時間を使用して生成\r\n        if (this.data.schedule == \"遅刻します\") {\r\n          text_schedule = `${this.data.time1}～${this.data.time2}ほど${this.data.schedule}`\r\n        } else {\r\n          text_schedule = this.data.schedule\r\n        }\r\n\r\n        // メッセージを生成\r\n        text = `${this.text1}${this.data.name}です。${text_reson}のため${text_schedule}。${this.text2}`;\r\n\r\n        // データに渡す\r\n        this.data.message = text;\r\n      },\r\n    }\r\n  };\r\n</script>\r\n\r\n<style>\r\n\r\n</style>"]}]}